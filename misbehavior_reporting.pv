(*Misbehaviour reporting and certificate revocationof the SCMS proposal for V2X infrastructure. 
  FUTURE WORK: add the revocation using Linkange Seeds(LS), this will not only revoke the current pseudonym certificate but also the future ones.
*)
(*
	This file contains the implementation in ProVerif of the SCMS Pseudonym Certificate misbehavior reporting and revocation phase. 
	The following properties are checked:
	1.Valid messages are sent and received by the OBEs
	2.Messages signed with revoked pseudonym certificates are discarded
	3.Enrollment is denied if the enrollment certificate is revoked (OBE id in CRL)
	4.OBE id is inserted into CRL by the RA
	5.The PCA and MA can authenticate each other
	6.The PCA and MA can authenticate each other
	7.MA authenticates to RA
	8.Valid messages are exchanged

*)
(* ----------------------------------------------------------------------------- *)
(* ProVerif SCMS Pseudonym Certificate Revocation	                             *)
(* ----------------------------------------------------------------------------- *)
(*
Verification summary:

1.1	Query not event(Sent_Valid_Message(message_1)) is false.
1.2	Query not event(Received_Valid_Message(message_1)) is false.
2.	Query not event(Message_Discarded_Revoked_Certificate(cert_id_2)) is false.
3.	Query not event(Enrollment_Discarded_Revoked_Certificate(cert_1)) is false.
4.	Query not event(Add_to_CRL(obe_id_1)) is false.
5.	Query inj-event(Received_Linkage_Value_PCA(request_1)) ==> inj-event(Sent_Linkage_Value_MA(request_1)) is true.
6.	Query inj-event(Received_Hash_Value_MA(response_1)) ==> inj-event(Sent_Hash_Value_PCA(response_1)) is true.
7.	Query inj-event(Received_Hash_Value_RA(request_1)) ==> inj-event(Sent_Hash_Value_MA(request_1)) is true.
8.	Query event(Received_Valid_Message(message_1)) ==> event(Sent_Valid_Message(message_1)) is true.

----------------------------------------------------------------------------------------------------------------------------
*)


(* Types Definition                                                              *)
type keymat.                                    (*` Key Material                 *)
type key.                                       (*` Symmetric key                *)
type pri_key.                                   (*` Private key                  *)
type pub_key.                                   (*` Public key                   *)
type result.

type cert.                                      (*` Certificate                  *)
type enrollment_cert.                           (*` Enrollment Certificate       *)
type butterfly_cert.                            (*` Bufferfly Certificate        *)

type pseudonym_request.                         (*` Pseudonym Request            *)

(* Channels                                                                      *)
free pub_ch:channel.                            (*` the public channel           *)
free pri_ch:channel  [private].                 (*` the private channel          *)
free report_ch:channel.                         (*` the report channel           *)

(* Tables                                                                        *)
table pca_table(bitstring, bitstring, bitstring, bitstring, cert).
table ra_table(bitstring, cert).
table crl(bitstring).

(* Utilities                                                                     *)
fun gen_pub_key(keymat): pub_key.
fun gen_pri_key(keymat): pri_key.

(* Digital Signature                                                             *)
fun sign(bitstring, pri_key):bitstring.
fun ok():result.
reduc forall m:bitstring, smat:keymat; get_message_sign(sign(m,gen_pri_key(smat))) = m.
reduc forall m:bitstring, smat:keymat; check_sign(sign(m, gen_pri_key(smat)), gen_pub_key(smat)) = ok().

(* Asymmetric encryption                                                         *)
fun aenc(bitstring, pub_key):bitstring.
reduc forall m:bitstring, smat:keymat; adec(aenc(m, gen_pub_key(smat)), gen_pri_key(smat)) = m.

(* Butterfly                                                                     *)
fun but_expand(bitstring): bitstring.
fun but_add(bitstring, bitstring): bitstring.
fun but_keymat(bitstring, bitstring): keymat.
fun but_to_pub_key(bitstring): pub_key.
fun but_to_pri_key(bitstring): pri_key.
fun make_linkage_value(bitstring, bitstring): bitstring.
fun time_linkage_value(bitstring, bitstring): bitstring.

(* Generic Cert                                                                  *)
fun make_cert(bitstring, pub_key, pri_key):cert [private].
reduc forall id:bitstring, pub:pub_key, pri:pri_key; get_cert_pub_key(make_cert(id, pub, pri)) = pub.
reduc forall id:bitstring, pub:pub_key, pri:pri_key; get_cert_id(make_cert(id, pub, pri)) = id.
reduc forall id:bitstring, pub:pub_key, smat:keymat; check_cert(make_cert(id, pub, gen_pri_key(smat)), gen_pub_key(smat)) = ok().

(* Added Experimental Butterfly extension functions                              *)
reduc forall m:bitstring, a:bitstring, b:bitstring; but_adec(aenc(m, but_to_pub_key(but_add(but_expand(a), but_expand(b)))), but_to_pri_key(but_add(a, b))) = m.
reduc forall m:bitstring, a:bitstring, b:bitstring, c:bitstring; but_check_sign(sign(m, but_to_pri_key(but_add(but_add(a, b), c))), but_to_pub_key(but_add(but_add(but_expand(a), but_expand(b)), but_expand(c)))) = ok().

(* HASH    *)
fun hash(bitstring): bitstring.

event Sent_Valid_Pseudonym_Request_OBE(bitstring).
event Received_Valid_Pseudonym_Request_RA(bitstring).
event Sent_Valid_Pseudonym_Request_RA(bitstring).
event Received_Valid_Pseudonym_Request_PCA(bitstring).
event Sent_Valid_Pseodonym_Certificate_PCA(cert).
event Received_Valid_Pseodonym_Certificate_OBE(cert).

event Sent_Valid_Message(bitstring).
query message:bitstring; event(Sent_Valid_Message(message)).
event Received_Valid_Message(bitstring).
query message:bitstring; event(Received_Valid_Message(message)).

event Message_Discarded_Revoked_Certificate(bitstring).
query cert_id:bitstring; event(Message_Discarded_Revoked_Certificate(cert_id)).

event Enrollment_Discarded_Revoked_Certificate(bitstring).
query cert:bitstring; event(Enrollment_Discarded_Revoked_Certificate(cert)).

event Sent_Linkage_Value_MA(bitstring).
event Received_Linkage_Value_PCA(bitstring).
event Sent_Hash_Value_PCA(bitstring).

event Received_Hash_Value_MA(bitstring).

event Sent_Hash_Value_MA(bitstring).
event Received_Hash_Value_RA(bitstring).

event Extracted_Hash_Request_PCA(bitstring).
event Receive_Report(bitstring).

event Add_to_CRL(bitstring).
query obe_id:bitstring; event(Add_to_CRL(obe_id)).

(*verify authentication of MA, PCA, RA, injective correspondence assertions*)

(*MA authN to PCA*)(*MA and PCA comms are bidirectional => Mutual AuthN and inj-events only should happen*)
query request:bitstring; event(Received_Linkage_Value_PCA(request)) ==> inj-event(Sent_Linkage_Value_MA(request)).

(*PCA authN to MA*)
query response:bitstring; event(Received_Hash_Value_MA(response)) ==> inj-event(Sent_Hash_Value_PCA(response)).

(*MA authN to RA*)
query request:bitstring; event(Received_Hash_Value_RA(request)) ==> inj-event(Sent_Hash_Value_MA(request)).

(* Q1.4: only honest vehicle can send valid message *)
query message:bitstring; event(Received_Valid_Message(message)) ==> event(Sent_Valid_Message(message)).



(*MESSAGE EXCHANGE PHASE -----------------------------------------------*)

let OBESendMessage(pseudonym_cert:cert, pseudonym_pri_key:pri_key) = 
	(* OBE can send multiple messages with the same pseudocert                   *)
	new message:bitstring;
	(* Sign the message                                                      *)
	let signed_message = sign(message, pseudonym_pri_key) in
	let full_message = (signed_message, pseudonym_cert) in
	event Sent_Valid_Message(full_message);
	out(pub_ch, full_message).

let OBEReceiveMessage(pca_cert:cert) = 
	in(pub_ch, full_message:bitstring);
	let (signed_message:bitstring, pseudonym_cert:cert) = full_message in

	(* Check pseudonym certificate                                               *)
	let pca_pub_key = get_cert_pub_key(pca_cert) in
	if check_cert(pseudonym_cert, pca_pub_key) = ok() then

	(* Check CRL                                                                 *)
	let cert_id = get_cert_id(pseudonym_cert) in
	get crl(=cert_id) in 
	event Message_Discarded_Revoked_Certificate(cert_id); 0
	else

	(* Check message signature                                                   *)
	let pseudonym_pub_key = get_cert_pub_key(pseudonym_cert) in
	if but_check_sign(signed_message, pseudonym_pub_key) = ok() then
	event Received_Valid_Message(full_message).

(*REPORTING PHASE ------------------------------------------------------*)

let PCAReport(pca_keymat:keymat, ma_cert:cert) =
	in(report_ch, encrypted_signed_request_ma:bitstring);

	(* Unpack Encrypted Request                                                  *)
	let pca_pri_key = gen_pri_key(pca_keymat) in
	let signed_request_ma = adec(encrypted_signed_request_ma, pca_pri_key) in
	let (linkage_value:bitstring, nonce:bitstring) = get_message_sign(signed_request_ma) in

	(* Check MA Signature                                                        *)		
	let ma_pub_key = get_cert_pub_key(ma_cert) in
	if check_sign(signed_request_ma, ma_pub_key)=ok() then

	event Received_Linkage_Value_PCA(encrypted_signed_request_ma);

	(* find Hash resulting from the linkage values                               *)
	get pca_table(=linkage_value, hash_request, la1_plv, la2_plv, new_cert) in

	event Extracted_Hash_Request_PCA(hash_request);

	(* sign response, encrypt send back                                          *)
	let response = (hash_request, nonce) in
	let signed_response = sign(response, pca_pri_key) in
	let encrypted_signed_response = aenc(signed_response, ma_pub_key) in
	event Sent_Hash_Value_PCA(encrypted_signed_response);
	out(report_ch, encrypted_signed_response).

let RAReport(ra_keymat:keymat, ma_cert:cert) =
	in(report_ch, encrypted_signed_request_ma:bitstring);

	(* Unpack Encrypted Request                                                  *)
	let ra_pri_key = gen_pri_key(ra_keymat) in
	let signed_request_ma = adec(encrypted_signed_request_ma, ra_pri_key) in
	let (hash_request:bitstring) = get_message_sign(signed_request_ma) in

	(* Check MA Signature                                                        *)		
	let ma_pub_key = get_cert_pub_key(ma_cert) in
	if check_sign(signed_request_ma, ma_pub_key)=ok() then

	event Received_Hash_Value_RA(encrypted_signed_request_ma);

	(* find Hash resulting from the linkage values                               *)
	get ra_table(=hash_request, obe_enrollment_cert) in

	let obe_id = get_cert_id(obe_enrollment_cert) in
	insert crl(obe_id);
	event Add_to_CRL(obe_id).

let MAReport(ma_keymat:keymat, rootca_cert:cert, ra_cert:cert, pca_cert:cert, linkage_value:bitstring) =
	(*the linkage value is the pseudonym id, in the real implementation the MA should also contact the LA to get the LSs in order to revoke all the future pseudo certs.*)
    insert crl(linkage_value);(*simplified version of the pseudo revocation CRL*)
    new nonce1:bitstring;

	let request_for_pca = (linkage_value, nonce1) in
	let ma_pri_key = gen_pri_key(ma_keymat) in
	let signed_request_for_pca = sign(request_for_pca, ma_pri_key) in
	let pca_pub_key = get_cert_pub_key(pca_cert) in
	let encrypted_signed_request_for_pca = aenc(signed_request_for_pca, pca_pub_key) in
	event Sent_Linkage_Value_MA(encrypted_signed_request_for_pca);
	out(report_ch, encrypted_signed_request_for_pca);

	in(report_ch, encrypted_signed_response_pca:bitstring);

	(* Unpack Encrypted Request                                                  *)
	let signed_response_pca = adec(encrypted_signed_response_pca, ma_pri_key) in
	let request = get_message_sign(signed_response_pca) in
	let (hash_request:bitstring, nonce2:bitstring) = request in

	(* Check PCA Signature                                                       *)		
	if check_sign(signed_response_pca, pca_pub_key)=ok() then

	if nonce1=nonce2 then

	event Received_Hash_Value_MA(encrypted_signed_response_pca);

	let request_for_ra = (hash_request) in
	let signed_request_for_ra = sign(request_for_ra, ma_pri_key) in
	let ra_pub_key = get_cert_pub_key(ra_cert) in
	let encrypted_signed_request_for_ra = aenc(signed_request_for_ra, ra_pub_key) in

	event Sent_Hash_Value_MA(encrypted_signed_request_for_ra);
	out(report_ch, encrypted_signed_request_for_ra).

(*PROVISIONING PHASE ----------------------------------------------------*)
(*entities are collapsed to simplify the provisioning process, this file focuses on the revocation process*)
(*!!LA are not fully modeled, the pseudonym certificate provisioning is simplified but could be implemented (see LCI LS derivation)*)

(*kept a simplified version of RA to try the re-enrollment*)
let RAPseudonym(ra_keymat:keymat, rootca_cert:cert, eca_cert:cert, ra_cert:cert, pca_cert:cert) = 
	in(pub_ch, encrypted_signed_request_from_obe:bitstring);
	(* Unpack Encrypted Request                                                  *)
	let ra_pri_key = gen_pri_key(ra_keymat) in
	let signed_request_from_obe = adec(encrypted_signed_request_from_obe, ra_pri_key) in
	let (obe_enrollment_cert:cert, butterfly_A:bitstring, butterfly_H:bitstring, fk:bitstring, fe:bitstring) = get_message_sign(signed_request_from_obe) in
	
	(* Check Certiciate                                                          *)
	let eca_pub_key = get_cert_pub_key(eca_cert) in
	if check_cert(obe_enrollment_cert, eca_pub_key)=ok() then

	(* Check CRL                                                                 *)
	let cert_id = get_cert_id(obe_enrollment_cert) in
	get crl(=cert_id) in
	event Enrollment_Discarded_Revoked_Certificate(cert_id); 0.
	

let OBE_RA_PCA_LA_PseudoCertProvision(obe_enrollment_cert:cert, rootca_cert:cert, eca_cert:cert, ra_cert:cert, pca_cert:cert, ma_keymat:keymat, pca_keymat:keymat, ra_keymat:keymat, obe_keymat:keymat) =
    
    (*OBE phase 1*)
    new a_seed:bitstring;
	new h_seed:bitstring;
	new fk:bitstring;
	new fe:bitstring;
	let butterfly_A = but_expand(a_seed) in
	let butterfly_H = but_expand(h_seed) in
    
	let request_for_ra = (obe_enrollment_cert, butterfly_A, butterfly_H, fk, fe) in
	let obe_pri_key = gen_pri_key(obe_keymat) in
	let signed_request_for_ra = sign(request_for_ra, obe_pri_key) in
	let ra_pub_key = get_cert_pub_key(ra_cert) in
	let encrypted_signed_request_for_ra = aenc(signed_request_for_ra, ra_pub_key) in

    (*LA*)
    new la1_plv:bitstring;
    new la2_plv:bitstring;
    let pca_pub_key = get_cert_pub_key(pca_cert) in
    let la1_plv_enc = aenc(la1_plv, pca_pub_key) in
	let la2_plv_enc = aenc(la2_plv, pca_pub_key) in

    (*RA*)
    new time:bitstring;
	let butterfly_B = but_add(butterfly_A, but_expand(fk)) in
	let butterfly_J = but_add(butterfly_H, but_expand(fe)) in

    (*kept this part because the ra table is used to find the hashrequest -> enrollmentcert*)
	let request_for_pca = (la1_plv_enc, la2_plv_enc, time, butterfly_B, butterfly_J) in
	let ra_pri_key = gen_pri_key(ra_keymat) in
    let signed_request_for_pca = sign(request_for_pca, ra_pri_key) in
	let pca_pub_key = get_cert_pub_key(pca_cert) in
	let encrypted_signed_request_for_pca = aenc(signed_request_for_pca, pca_pub_key) in
	let hash_request_for_pca = hash(encrypted_signed_request_for_pca) in
	insert ra_table(hash_request_for_pca, obe_enrollment_cert);

    (*PCA*)
	new c_seed:bitstring;
    let pca_pri_key = gen_pri_key(pca_keymat) in
	let butterfly_C = but_expand(c_seed) in
	let butterfly_total = but_add(butterfly_B, butterfly_C) in
	let new_pub_key = but_to_pub_key(butterfly_total) in
	let la1_lv = time_linkage_value(la1_plv, time) in
	let la2_lv = time_linkage_value(la2_plv, time) in
	let linkage_value = make_linkage_value(la1_lv, la2_lv) in
	let new_cert = make_cert(linkage_value, new_pub_key, pca_pri_key) in
	
	(* add record to table, given lv -> hashrequest *)
	insert pca_table(linkage_value, hash_request_for_pca, la1_plv, la2_plv, new_cert);


    (*OBE phase 2*)
    let new_pri_key = but_to_pri_key(but_add(but_add(a_seed, fk), c_seed)) in
	let pseudonim_id = get_cert_id(new_cert) in
	
	(*try to re-enroll*)
	out(pub_ch, encrypted_signed_request_for_ra);
    (*try to send a message and report to MA*)
	(*FUTURE WORK: try to separate MA and verify authentication*)
    (OBESendMessage(new_cert, new_pri_key)| MAReport(ma_keymat, rootca_cert, ra_cert, pca_cert, pseudonim_id)).
	

free rootca_keymat:keymat [private].
process (*MAIN*)
	(* Create RootCA keymaterial, public key and private key                     *)
	new rootca_id:bitstring;
	let rootca_pri_key = gen_pri_key(rootca_keymat) in
	let rootca_pub_key = gen_pub_key(rootca_keymat) in
	let rootca_cert =  make_cert(rootca_id, rootca_pub_key, rootca_pri_key) in
	out(pub_ch, rootca_cert);

	(* Create ECA                                                                *)
	new eca_keymat:keymat;
	new eca_id:bitstring;
	let eca_pri_key = gen_pri_key(eca_keymat) in
	let eca_pub_key = gen_pub_key(eca_keymat) in
	let eca_cert = make_cert(eca_id, eca_pub_key, rootca_pri_key) in
	out(pub_ch, eca_cert);

	(* Create RA                                                                 *)
	new ra_keymat:keymat;
	new ra_id:bitstring;
	let ra_pub_key = gen_pub_key(ra_keymat) in
	let ra_pri_key = gen_pri_key(ra_keymat) in

	let ra_cert = make_cert(ra_id, ra_pub_key, rootca_pri_key) in
	out(pub_ch, ra_cert);

	(* Create PCA                                                                *)
	new pca_keymat:keymat;
	new pca_id:bitstring;
	let pca_pub_key = gen_pub_key(pca_keymat) in
	let pca_pri_key = gen_pri_key(pca_keymat) in
	let pca_cert = make_cert(pca_id, pca_pub_key, rootca_pri_key) in
	out(pub_ch, pca_cert);

	(* Create LA1                                                                *)
	new la1_keymat:keymat;
	new la1_id:bitstring;
	let la1_pub_key = gen_pub_key(la1_keymat) in
	let la1_cert = make_cert(la1_id, la1_pub_key, rootca_pri_key) in
	out(pub_ch, la1_cert);

	(* Create LA2                                                                *)
	new la2_keymat:keymat;
	new la2_id:bitstring;
	let la2_pub_key = gen_pub_key(la2_keymat) in
	let la2_cert = make_cert(la2_id, la2_pub_key, rootca_pri_key) in
	out(pub_ch, la2_cert);

	(* Create MA                                                                 *)
	new ma_keymat:keymat;
	new ma_id:bitstring;
	let ma_pub_key = gen_pub_key(ma_keymat) in
	let ma_pri_key = gen_pri_key(ma_keymat) in
	let ma_cert = make_cert(ma_id, ma_pub_key, rootca_pri_key) in
	out(pub_ch, ma_cert);

    (
		new bad_obe_id:bitstring;
		new bad_obe_keymat:keymat;
		let bad_obe_pub_key = gen_pub_key(bad_obe_keymat) in
		let bad_obe_enrollment_cert = make_cert(bad_obe_id, bad_obe_pub_key, eca_pri_key) in
		out(pub_ch, bad_obe_enrollment_cert);
		(OBE_RA_PCA_LA_PseudoCertProvision(bad_obe_enrollment_cert, rootca_cert, eca_cert, ra_cert, pca_cert, ma_keymat, pca_keymat, ra_keymat, bad_obe_keymat))
	)
    | !OBEReceiveMessage(pca_cert)
	| !RAPseudonym(ra_keymat, rootca_cert, eca_cert, ra_cert, pca_cert)
    | RAReport(ra_keymat, ma_cert)
	| PCAReport(pca_keymat, ma_cert)