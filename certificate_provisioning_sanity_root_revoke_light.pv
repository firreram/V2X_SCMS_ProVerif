(*
	This file contains the implementation in ProVerif of the SCMS Pseudonym Certificate provisioning phase. 
  	This file is specifically written to emulate rootCA compromission and includes the necessary modifications(full certificate chain verification and certificates retrieved from the public channel).
	NOTICE this is a lightweight implementation of the complete certification chain verification (only OBE-RA communication) in order to demonstrate the validity of the implementation.
	The following properties are checked:
		1. ECA sends enrollment certificate to OBE
		2. Attacker gets enrollment certificate from SCMS
		3. Valid messages are exchanged between OBEs
		4. Certificates are never revoked
		5. Only LA sends linkage values to RA
		6. PCA response for OBE is secret
		7. Ra can receive pseudonym requests only from honest vehicles
		8. Authentication of the Ra to the Pca
		9. Authentication of the Pca to the vehicle
		10. Only honest vehicles can send valid messages
*)
(* ----------------------------------------------------------------------------- *)
(* ProVerif SCMS Pseudonym Certificate Provisioning                               *)
(* ----------------------------------------------------------------------------- *)
(*
Verification summary:

1.	Query not event(Sent_Valid_Enrollment_Cert_ECA(ecert)) is false.
2.	Query not event(Sent_Valid_Attacker_Cert_ECA(aecert)) is true.
3.1.Query not event(Sent_Valid_Message(msg)) is false.
3.2.Query not event(Received_Valid_Message(msg)) is false.
4.	Query not event(Message_Discarded_Revoked_Certificate(certid)) is true.
5.1.Query event(received_plv_from_la1_RA(plv)) ==> event(sent_plv_from_LA(plv)) is true.
5.2.Query event(received_plv_from_la2_RA(plv)) ==> event(sent_plv_from_LA(plv)) is true.
6.	Query not attacker(scrt[]) is false.
7.	Query event(Received_Valid_Pseudonym_Request_RA(request)) ==> event(Sent_Valid_Pseudonym_Request_OBE(request)) is false.
8.	Query event(Received_Valid_Pseudonym_Request_PCA(request)) ==> event(Sent_Valid_Pseudonym_Request_RA(request)) is true.
9.1.Query event(Received_Valid_Pseodonym_Certificate_OBE(certificate)) ==> event(Sent_Valid_Pseodonym_Certificate_PCA(certificate)) is true.
9.2.Query inj-event(Received_Valid_Pseodonym_Certificate_OBE(certificate)) ==> inj-event(Sent_Valid_Pseodonym_Certificate_PCA(certificate)) is true.
10.	Query event(Received_Valid_Message(message_1)) ==> event(Sent_Valid_Message(message_1)) is false.
----------------------------------------------------------------------------------------------------------------------------
*)

(* Types Definition                                                              *)
type keymat.                                    (*` Key Material                 *)
type key.                                       (*` Symmetric key                *)
type pri_key.                                   (*` Private key                  *)
type pub_key.                                   (*` Public key                   *)
type result.

type cert.                                      (*` Certificate                  *)
type enrollment_cert.                           (*` Enrollment Certificate       *)
type butterfly_cert.                            (*` Bufferfly Certificate        *)

type pseudonym_request.                         (*` Pseudonym Request            *)

(* Channels                                                                      *)
free pub_ch:channel.                            (*` the public channel           *)
free pri_ch:channel  [private].                 (*` the private channel          *)
free report_ch:channel.                         (*` the report channel           *)

(* secret test value *)
free scrt:bitstring [private].
free attacker_id:bitstring.
free a_seed:bitstring [private].

(* Tables                                                                        *)
table pca_table(bitstring, bitstring, bitstring, bitstring, cert).
table ra_table(bitstring, cert).
table crl(bitstring).

(* Utilities                                                                     *)
fun gen_pub_key(keymat): pub_key.
fun gen_pri_key(keymat): pri_key.

(* Digital Signature                                                             *)
fun sign(bitstring, pri_key):bitstring.
fun ok():result.
reduc forall m:bitstring, smat:keymat; get_message_sign(sign(m,gen_pri_key(smat))) = m.
reduc forall m:bitstring, smat:keymat; check_sign(sign(m, gen_pri_key(smat)), gen_pub_key(smat)) = ok().

(* Asymmetric encryption                                                         *)
fun aenc(bitstring, pub_key):bitstring.
reduc forall m:bitstring, smat:keymat; adec(aenc(m, gen_pub_key(smat)), gen_pri_key(smat)) = m.

(* Butterfly                                                                     *)
fun but_expand(bitstring): bitstring.
fun but_add(bitstring, bitstring): bitstring.
fun but_keymat(bitstring, bitstring): keymat.
fun but_to_pub_key(bitstring): pub_key.
fun but_to_pri_key(bitstring): pri_key.
fun make_linkage_value(bitstring, bitstring): bitstring.
fun datetime_linkage_value(bitstring, bitstring): bitstring.

(* Generic Cert                                                                  *)
fun make_cert(bitstring, pub_key, pri_key):cert.
reduc forall id:bitstring, pub:pub_key, pri:pri_key; get_cert_pub_key(make_cert(id, pub, pri)) = pub.
reduc forall id:bitstring, pub:pub_key, pri:pri_key; get_cert_id(make_cert(id, pub, pri)) = id.
reduc forall id:bitstring, pub:pub_key, smat:keymat; check_cert(make_cert(id, pub, gen_pri_key(smat)), gen_pub_key(smat)) = ok().

(* Added Experimental Butterfly extension functions                              *)
reduc forall m:bitstring, a:bitstring, b:bitstring; but_adec(aenc(m, but_to_pub_key(but_add(but_expand(a), but_expand(b)))), but_to_pri_key(but_add(a, b))) = m.
reduc forall m:bitstring, a:bitstring, b:bitstring, c:bitstring; but_check_sign(sign(m, but_to_pri_key(but_add(but_add(a, b), c))), but_to_pub_key(but_add(but_add(but_expand(a), but_expand(b)), but_expand(c)))) = ok().

(* HASH    *)
fun hash(bitstring): bitstring.

(* events *)
event Sent_Valid_Pseudonym_Request_OBE(bitstring).
event Received_Valid_Pseudonym_Request_RA(bitstring).
event Sent_Valid_Pseudonym_Request_RA(bitstring).
event Received_Valid_Pseudonym_Request_PCA(bitstring).
event Sent_Valid_Pseodonym_Certificate_PCA(cert).
event Received_Valid_Pseodonym_Certificate_OBE(cert).

event Sent_Valid_Message(bitstring).
event Received_Valid_Message(bitstring).

event Message_Discarded_Revoked_Certificate(bitstring).

event Sent_Linkage_Value_MA(bitstring).
event Received_Linkage_Value_PCA(bitstring).
event Sent_Hash_Value_PCA(bitstring).
event Received_Hash_Value_MA(bitstring).
event Sent_Hash_Value_MA(bitstring).
event Received_Hash_Value_RA(bitstring).

event Extracted_Hash_Request_PCA(bitstring).

event Add_to_CRL(bitstring).

event received_plv_from_la1_RA(bitstring).
event received_plv_from_la2_RA(bitstring).
event sent_plv_from_LA(bitstring).
event Publish_Cert_RA(cert).
event Publish_Cert_ECA(cert).

(* sanity checks --------------------------------*)

event Sent_Valid_Enrollment_Cert_ECA(cert).
(* OBE gets enrollment certificate from SCMS *)
query ecert:cert; event(Sent_Valid_Enrollment_Cert_ECA(ecert)).

event Sent_Valid_Attacker_Cert_ECA(cert).
(* ATK gets enrollment certificate from SCMS *)
query aecert:cert; event(Sent_Valid_Attacker_Cert_ECA(aecert)).


query msg:bitstring; event(Sent_Valid_Message(msg)).
query msg:bitstring; event(Received_Valid_Message(msg)).

query certid:bitstring; event(Message_Discarded_Revoked_Certificate(certid)).

(* LA sends linkage values to RA, expected: false (values are not authenticated) *)
query plv:bitstring; event(received_plv_from_la1_RA(plv))==>event(sent_plv_from_LA(plv)).
query plv:bitstring; event(received_plv_from_la2_RA(plv))==>event(sent_plv_from_LA(plv)).

(* A tag is inserted in the message fo the OBE by the PCA, NO ONE should be able to read the response, other than the OBE itself *)
query attacker(scrt).
(* Test if the seeds fot the butterfly key expansions are secure *)
query attacker(a_seed).

(* Ra can receive pseudonym requests only from honest vehicles - expected: false (if the attacker has a valid enrollment certificate) *)
query request:bitstring; event(Received_Valid_Pseudonym_Request_RA(request)) ==> event(Sent_Valid_Pseudonym_Request_OBE(request)).

(* Authentication of the Ra to the Pca *)
query request:bitstring; event(Received_Valid_Pseudonym_Request_PCA(request)) ==> event(Sent_Valid_Pseudonym_Request_RA(request)).

(* Authentication of the Pca to the vehicle *)
query certificate:cert; event(Received_Valid_Pseodonym_Certificate_OBE(certificate)) ==> event(Sent_Valid_Pseodonym_Certificate_PCA(certificate)).

(* Strong authentication of the Pca to the vehicle *)
(* TRUE because the certificate is sent only after a request is received AND the certificate is linked to that request*)
query certificate:cert; event(Received_Valid_Pseodonym_Certificate_OBE(certificate)) ==> inj-event(Sent_Valid_Pseodonym_Certificate_PCA(certificate)).

(* Only honest vehicle can send valid message - expected: false (the attacker has a valid enrollment certificate)*)
query message:bitstring; event(Received_Valid_Message(message)) ==> event(Sent_Valid_Message(message)).



let OBESendMessage(pseudonym_cert:cert, pseudonym_pri_key:pri_key) = 
	(* OBE can send multiple messages with the same pseudocert                   *)
	new message:bitstring;
	(* Sign the message                                                      *)
	let signed_message = sign(message, pseudonym_pri_key) in
	let full_message = (signed_message, pseudonym_cert) in
	event Sent_Valid_Message(full_message);
	out(pub_ch, full_message).

let OBEReceiveMessage(pca_cert:cert) = 
	in(pub_ch, full_message:bitstring);
	let (signed_message:bitstring, pseudonym_cert:cert) = full_message in

	(* Check pseudonym certificate                                               *)
	let pca_pub_key = get_cert_pub_key(pca_cert) in
	if check_cert(pseudonym_cert, pca_pub_key) = ok() then

	(* Check CRL                                                                 *)
	let cert_id = get_cert_id(pseudonym_cert) in
	get crl(=cert_id) in 
	event Message_Discarded_Revoked_Certificate(cert_id); 0
	else

	(* Check message signature                                                   *)
	let pseudonym_pub_key = get_cert_pub_key(pseudonym_cert) in
	if but_check_sign(signed_message, pseudonym_pub_key) = ok() then
	event Received_Valid_Message(full_message).

let PCAPseudonym(pca_keymat:keymat, rootca_cert:cert, pca_cert:cert, ra_cert:cert) =
	in(pub_ch, encrypted_signed_request_from_ra:bitstring);

	(* Unpack Encrypted Request                                                  *)
	let pca_pri_key = gen_pri_key(pca_keymat) in
	let signed_request_from_ra = adec(encrypted_signed_request_from_ra, pca_pri_key) in
	let (la1_plv_enc:bitstring, la2_plv_enc:bitstring, datetime:bitstring, butterfly_B:bitstring, butterfly_J:bitstring) = get_message_sign(signed_request_from_ra) in

	(* Check RA Signature                                                        *)		
	let ra_pub_key = get_cert_pub_key(ra_cert) in
	if check_sign(signed_request_from_ra, ra_pub_key)=ok() then

	event Received_Valid_Pseudonym_Request_PCA(signed_request_from_ra);

	(* gen c and buttefly Expand                                                 *)
	new c_seed:bitstring;
	let butterfly_C = but_expand(c_seed) in
	let butterfly_total = but_add(butterfly_B, butterfly_C) in
	let new_pub_key = but_to_pub_key(butterfly_total) in

	(* calculate linkage values                                                  *)
	let la1_plv = adec(la1_plv_enc, pca_pri_key) in
	let la2_plv = adec(la2_plv_enc, pca_pri_key) in
	let la1_lv = datetime_linkage_value(la1_plv, datetime) in
	let la2_lv = datetime_linkage_value(la2_plv, datetime) in
	let linkage_value = make_linkage_value(la1_lv, la2_lv) in
	
	(* sign new pseudonym cert and send back                                     *)
	let new_cert = make_cert(linkage_value, new_pub_key, pca_pri_key) in
	let response_for_obe = (new_cert, new_pub_key, c_seed, scrt) in
	let butterfly_aenc_key = but_to_pub_key(butterfly_J) in
	let encrypted_response_for_obe = aenc(response_for_obe, butterfly_aenc_key) in
	let signed_encrypted_response_for_obe = sign(encrypted_response_for_obe, pca_pri_key) in

	(* add record to table                                                       *)
	let hash_request = hash(encrypted_signed_request_from_ra) in
	insert pca_table(linkage_value, hash_request, la1_plv, la2_plv, new_cert);
	event Sent_Valid_Pseodonym_Certificate_PCA(new_cert);

	out(pub_ch, signed_encrypted_response_for_obe).


let RAPseudonym(ra_keymat:keymat, ra_cert:cert, pca_cert:cert, la1_cert:cert, la2_cert:cert) =
	in(pub_ch, encrypted_signed_request_from_obe:bitstring);

	(* Unpack Encrypted Request                                                  *)
	let ra_pri_key = gen_pri_key(ra_keymat) in
	in(pub_ch, rootca_cert:cert);
	in(pub_ch, eca_cert:cert);

	(* Unpack Encrypted Request                                                  *)
	let ra_pri_key = gen_pri_key(ra_keymat) in
	let signed_request_from_obe = adec(encrypted_signed_request_from_obe, ra_pri_key) in
	let (obe_enrollment_cert:cert, butterfly_A:bitstring, butterfly_H:bitstring, fk:bitstring, fe:bitstring) = get_message_sign(signed_request_from_obe) in
	
	(* Check ECA Certificate													*)
	let rootca_pub_key = get_cert_pub_key(rootca_cert) in
	if check_cert(eca_cert, rootca_pub_key)=ok() then

	(* Check Enrolment Certificate                                              *)
	let eca_pub_key = get_cert_pub_key(eca_cert) in
	if check_cert(obe_enrollment_cert, eca_pub_key)=ok() then

	(* Check CRL                                                                 *)
	let cert_id = get_cert_id(obe_enrollment_cert) in
	
	get crl(=cert_id) in (*possible tests with revoked certs*)
	event Message_Discarded_Revoked_Certificate(cert_id); 0
	else

	(* Check OBE Signature                                                       *)
	let obe_pub_key = get_cert_pub_key(obe_enrollment_cert) in
	if check_sign(signed_request_from_obe, obe_pub_key)=ok() then

	event Received_Valid_Pseudonym_Request_RA(signed_request_from_obe);

	(* get and check prelinkage values	                                           *)
	in(pub_ch, la1_plv_sign_enc:bitstring);
	in(pub_ch, la2_plv_sign_env:bitstring);
	
	let la1_pub_key = get_cert_pub_key(la1_cert) in
	if check_sign(la1_plv_sign_enc, la1_pub_key)=ok() then
	event received_plv_from_la1_RA(la1_plv_sign_enc);
	let (la1_plv_enc:bitstring) = get_message_sign(la1_plv_sign_enc) in
	
	
	let la2_pub_key = get_cert_pub_key(la2_cert) in
	if check_sign(la2_plv_sign_env, la2_pub_key)=ok() then
	event received_plv_from_la2_RA(la2_plv_sign_env); 
	let (la2_plv_env:bitstring) = get_message_sign(la2_plv_sign_env) in
	
	
	
	new datetime:bitstring;
	

	(* buttefly Expand                                                           *)
	let butterfly_B = but_add(butterfly_A, but_expand(fk)) in
	let butterfly_J = but_add(butterfly_H, but_expand(fe)) in

	(* request PCA pseudonym certificate                                         *)
	let request_for_pca = (la1_plv_enc, la2_plv_env, datetime, butterfly_B, butterfly_J) in
	let signed_request_for_pca = sign(request_for_pca, ra_pri_key) in
	let pca_pub_key = get_cert_pub_key(pca_cert) in
	let encrypted_signed_request_for_pca = aenc(signed_request_for_pca, pca_pub_key) in
	let hash_request_for_pca = hash(encrypted_signed_request_for_pca) in
	event Sent_Valid_Pseudonym_Request_RA(signed_request_for_pca);
	out(pub_ch, encrypted_signed_request_for_pca);
	insert ra_table(hash_request_for_pca, obe_enrollment_cert);

	(* Passthrough PCA -> OBE                                                   *)
	in(pub_ch, response_from_pca:bitstring);
	out(pub_ch, response_from_pca).

let LAPseudonym(la_keymat:keymat, pca_cert:cert) = 
	new val:bitstring;

	let pca_pub_key = get_cert_pub_key(pca_cert) in

	(*sign the plvs with LA SK*)
	let la_pri_key = gen_pri_key(la_keymat) in
	let encrypted_request_for_pca = aenc(val, pca_pub_key) in
	let encrypted_signed_request_for_pca = sign(encrypted_request_for_pca, la_pri_key) in
	
	event sent_plv_from_LA(encrypted_signed_request_for_pca);
	out(pub_ch, encrypted_signed_request_for_pca).

let OBERequestPseudonym(obe_id:bitstring, obe_keymat:keymat, obe_enrollment_cert:cert, rootca_cert:cert, eca_cert:cert, ra_cert:cert, pca_cert:cert) = 
	new h_seed:bitstring;
	new fk:bitstring;
	new fe:bitstring;
	let butterfly_A = but_expand(a_seed) in
	let butterfly_H = but_expand(h_seed) in
	let request_for_ra = (obe_enrollment_cert, butterfly_A, butterfly_H, fk, fe) in
	let obe_pri_key = gen_pri_key(obe_keymat) in
	let signed_request_for_ra = sign(request_for_ra, obe_pri_key) in
	let ra_pub_key = get_cert_pub_key(ra_cert) in
	let encrypted_signed_request_for_ra = aenc(signed_request_for_ra, ra_pub_key) in
	event Sent_Valid_Pseudonym_Request_OBE(signed_request_for_ra);
	out(pub_ch, encrypted_signed_request_for_ra);


	(* sent pseudonym cert request to RA *)
	in(pub_ch, encrypted_response_ra:bitstring);
	in(pub_ch, rootca_cert:cert);
	in(pub_ch, pca_cert:cert);

	(* Check PCA Signature                                                       *)		
	let rootca_pub_key = get_cert_pub_key(rootca_cert) in
	if check_cert(pca_cert, rootca_pub_key)=ok() then
	
	let pca_pub_key = get_cert_pub_key(pca_cert) in
	if check_sign(encrypted_response_ra, pca_pub_key)=ok() then

	let butterfly_dec_key = but_to_pri_key(but_add(h_seed, fe)) in
	let response_ra = but_adec(get_message_sign(encrypted_response_ra), butterfly_dec_key) in
	let (new_cert:cert, new_pub_key:bitstring, c_seed:bitstring, scrt:bitstring) = response_ra in
	let new_pri_key = but_to_pri_key(but_add(but_add(a_seed, fk), c_seed)) in

	event Received_Valid_Pseodonym_Certificate_OBE(new_cert);
	(* SendMessage and Receive Messages *)
	!OBESendMessage(new_cert, new_pri_key).


free rootca_keymat:keymat.
process
	(* Create RootCA keymaterial, public key and private key                     *)
	new rootca_id:bitstring;
	let rootca_pri_key = gen_pri_key(rootca_keymat) in
	let rootca_pub_key = gen_pub_key(rootca_keymat) in
	let rootca_cert = make_cert(rootca_id, rootca_pub_key, rootca_pri_key) in
	out(pub_ch, (rootca_cert, rootca_keymat));

	(* Create ECA                                                                *)
	new eca_keymat:keymat;
	new eca_id:bitstring;
	let eca_pri_key = gen_pri_key(eca_keymat) in
	let eca_pub_key = gen_pub_key(eca_keymat) in
	let eca_cert = make_cert(eca_id, eca_pub_key, rootca_pri_key) in
	out(pub_ch, eca_cert);
    event Publish_Cert_ECA(eca_cert);

	(* Create RA                                                                 *)
	new ra_keymat:keymat;
	new ra_id:bitstring;
	let ra_pri_key = gen_pri_key(ra_keymat) in
	let ra_pub_key = gen_pub_key(ra_keymat) in
	let ra_cert = make_cert(ra_id, ra_pub_key, rootca_pri_key) in
	out(pub_ch, ra_cert);
    event Publish_Cert_RA(ra_cert);

	(* Create PCA                                                                *)
	new pca_keymat:keymat;
	new pca_id:bitstring;
	let pca_pri_key = gen_pri_key(pca_keymat) in
	let pca_pub_key = gen_pub_key(pca_keymat) in
	let pca_cert = make_cert(pca_id, pca_pub_key, rootca_pri_key) in
	out(pub_ch, pca_cert);

	(* Create LA1                                                                *)
	new la1_keymat:keymat;
	new la1_id:bitstring;
	let la1_pri_key = gen_pri_key(la1_keymat) in
	let la1_pub_key = gen_pub_key(la1_keymat) in
	let la1_cert = make_cert(la1_id, la1_pub_key, rootca_pri_key) in
	out(pub_ch, la1_cert);

	(* Create LA2                                                                *)
	new la2_keymat:keymat;
	new la2_id:bitstring;
	let la2_pub_key = gen_pub_key(la2_keymat) in
	let la2_cert = make_cert(la2_id, la2_pub_key, rootca_pri_key) in
	out(pub_ch, la2_cert);

	(* Create MA                                                                 *)
	new ma_keymat:keymat;
	new ma_id:bitstring;
	let ma_pri_key = gen_pri_key(ma_keymat) in
	let ma_pub_key = gen_pub_key(ma_keymat) in
	let ma_cert = make_cert(ma_id, ma_pub_key, rootca_pri_key) in
	out(pub_ch, ma_cert);

	(* Enrollment certificate                                                    *)
	!(
		new obe_id:bitstring;
		new obe_keymat:keymat;
		let obe_pub_key = gen_pub_key(obe_keymat) in
		let obe_enrollment_cert = make_cert(obe_id, obe_pub_key, eca_pri_key) in
		out(pub_ch, obe_enrollment_cert);
        event Sent_Valid_Enrollment_Cert_ECA(obe_enrollment_cert);
		!(OBERequestPseudonym(obe_id, obe_keymat, obe_enrollment_cert, rootca_cert, eca_cert, ra_cert, pca_cert))
	)
	(* Attacker certificate provisioning *)
	(*)
	| (
		new attacker_keymat:keymat;
		let attacker_pub_key = gen_pub_key(attacker_keymat) in
		let attacker_enrollment_cert = make_cert(attacker_id, attacker_pub_key, eca_pri_key) in
		event Sent_Valid_Attacker_Cert_ECA(attacker_enrollment_cert);
        out(pub_ch, (attacker_id, attacker_keymat, attacker_enrollment_cert))
	)
	*)
	| !OBEReceiveMessage(pca_cert)
	| !RAPseudonym(ra_keymat, ra_cert, pca_cert, la1_cert, la2_cert)
	| !PCAPseudonym(pca_keymat, rootca_cert, pca_cert, ra_cert)
	| !LAPseudonym(la1_keymat, pca_cert)
	| !LAPseudonym(la2_keymat, pca_cert)
